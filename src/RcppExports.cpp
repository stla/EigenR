// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// EigenR_chol_real
Rcpp::NumericMatrix EigenR_chol_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_chol_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_chol_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_chol_cplx
Rcpp::ComplexVector EigenR_chol_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_chol_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_chol_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_chol_sparse_real
Rcpp::NumericMatrix EigenR_chol_sparse_real(const std::vector<size_t>& i, const std::vector<size_t>& j, const std::vector<double>& Mij, const size_t nrows, const size_t ncols);
RcppExport SEXP _EigenR_EigenR_chol_sparse_real(SEXP iSEXP, SEXP jSEXP, SEXP MijSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<size_t>& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const std::vector<size_t>& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Mij(MijSEXP);
    Rcpp::traits::input_parameter< const size_t >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< const size_t >::type ncols(ncolsSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_chol_sparse_real(i, j, Mij, nrows, ncols));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_chol_sparse_cplx
Rcpp::ComplexVector EigenR_chol_sparse_cplx(const std::vector<size_t>& i, const std::vector<size_t>& j, const std::vector<std::complex<double>>& Mij, const size_t nrows, const size_t ncols);
RcppExport SEXP _EigenR_EigenR_chol_sparse_cplx(SEXP iSEXP, SEXP jSEXP, SEXP MijSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<size_t>& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const std::vector<size_t>& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::complex<double>>& >::type Mij(MijSEXP);
    Rcpp::traits::input_parameter< const size_t >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< const size_t >::type ncols(ncolsSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_chol_sparse_cplx(i, j, Mij, nrows, ncols));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_UtDU_real
Rcpp::List EigenR_UtDU_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_UtDU_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_UtDU_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_UtDU_cplx
Rcpp::List EigenR_UtDU_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_UtDU_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_UtDU_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_det_real
double EigenR_det_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_det_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_det_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_det_cplx
std::complex<double> EigenR_det_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_det_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_det_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_det_sparse_real
double EigenR_det_sparse_real(const std::vector<size_t>& i, const std::vector<size_t>& j, const std::vector<double>& Mij, const size_t nrows, const size_t ncols);
RcppExport SEXP _EigenR_EigenR_det_sparse_real(SEXP iSEXP, SEXP jSEXP, SEXP MijSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<size_t>& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const std::vector<size_t>& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Mij(MijSEXP);
    Rcpp::traits::input_parameter< const size_t >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< const size_t >::type ncols(ncolsSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_det_sparse_real(i, j, Mij, nrows, ncols));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_det_sparse_cplx
std::complex<double> EigenR_det_sparse_cplx(const std::vector<size_t>& i, const std::vector<size_t>& j, const std::vector<std::complex<double>>& Mij, const size_t nrows, const size_t ncols);
RcppExport SEXP _EigenR_EigenR_det_sparse_cplx(SEXP iSEXP, SEXP jSEXP, SEXP MijSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<size_t>& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const std::vector<size_t>& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::complex<double>>& >::type Mij(MijSEXP);
    Rcpp::traits::input_parameter< const size_t >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< const size_t >::type ncols(ncolsSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_det_sparse_cplx(i, j, Mij, nrows, ncols));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_absdet
double EigenR_absdet(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_absdet(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_absdet(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_logabsdet
double EigenR_logabsdet(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_logabsdet(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_logabsdet(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_image_LU_real
Eigen::MatrixXd EigenR_image_LU_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_image_LU_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_image_LU_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_image_LU_cplx
Rcpp::List EigenR_image_LU_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_image_LU_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_image_LU_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_image_QR_real
Eigen::MatrixXd EigenR_image_QR_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_image_QR_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_image_QR_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_image_QR_cplx
Rcpp::List EigenR_image_QR_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_image_QR_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_image_QR_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_image_COD_real
Eigen::MatrixXd EigenR_image_COD_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_image_COD_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_image_COD_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_image_COD_cplx
Rcpp::List EigenR_image_COD_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_image_COD_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_image_COD_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_inverse_real
Eigen::MatrixXd EigenR_inverse_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_inverse_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_inverse_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_inverse_cplx
Rcpp::List EigenR_inverse_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_inverse_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_inverse_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_pseudoInverse_real
Eigen::MatrixXd EigenR_pseudoInverse_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_pseudoInverse_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_pseudoInverse_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_pseudoInverse_cplx
Rcpp::List EigenR_pseudoInverse_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_pseudoInverse_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_pseudoInverse_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_kernel_COD_real
Eigen::MatrixXd EigenR_kernel_COD_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_kernel_COD_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_kernel_COD_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_kernel_COD_cplx
Rcpp::List EigenR_kernel_COD_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_kernel_COD_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_kernel_COD_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_kernel_LU_real
Eigen::MatrixXd EigenR_kernel_LU_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_kernel_LU_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_kernel_LU_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_kernel_LU_cplx
Rcpp::List EigenR_kernel_LU_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_kernel_LU_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_kernel_LU_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_kernelDimension_real
unsigned EigenR_kernelDimension_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_kernelDimension_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_kernelDimension_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_kernelDimension_cplx
unsigned EigenR_kernelDimension_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_kernelDimension_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_kernelDimension_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_lsSolve_real
Eigen::MatrixXd EigenR_lsSolve_real(const Eigen::MatrixXd& A, const Eigen::MatrixXd& b);
RcppExport SEXP _EigenR_EigenR_lsSolve_real(SEXP ASEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_lsSolve_real(A, b));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_lsSolve_cplx
Rcpp::List EigenR_lsSolve_cplx(const Eigen::MatrixXd& ReA, const Eigen::MatrixXd& ImA, const Eigen::MatrixXd& Reb, const Eigen::MatrixXd& Imb);
RcppExport SEXP _EigenR_EigenR_lsSolve_cplx(SEXP ReASEXP, SEXP ImASEXP, SEXP RebSEXP, SEXP ImbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type ReA(ReASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type ImA(ImASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Reb(RebSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Imb(ImbSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_lsSolve_cplx(ReA, ImA, Reb, Imb));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_lsSolve_cod_real
Eigen::MatrixXd EigenR_lsSolve_cod_real(const Eigen::MatrixXd& A, const Eigen::MatrixXd& b);
RcppExport SEXP _EigenR_EigenR_lsSolve_cod_real(SEXP ASEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_lsSolve_cod_real(A, b));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_lsSolve_cod_cplx
Rcpp::List EigenR_lsSolve_cod_cplx(const Eigen::MatrixXd& ReA, const Eigen::MatrixXd& ImA, const Eigen::MatrixXd& Reb, const Eigen::MatrixXd& Imb);
RcppExport SEXP _EigenR_EigenR_lsSolve_cod_cplx(SEXP ReASEXP, SEXP ImASEXP, SEXP RebSEXP, SEXP ImbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type ReA(ReASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type ImA(ImASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Reb(RebSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Imb(ImbSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_lsSolve_cod_cplx(ReA, ImA, Reb, Imb));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_exp_real
Eigen::MatrixXd EigenR_exp_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_exp_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_exp_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_exp_cplx
Rcpp::List EigenR_exp_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_exp_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_exp_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_log_real
Eigen::MatrixXd EigenR_log_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_log_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_log_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_log_cplx
Rcpp::List EigenR_log_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_log_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_log_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_cos_real
Eigen::MatrixXd EigenR_cos_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_cos_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_cos_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_cos_cplx
Rcpp::List EigenR_cos_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_cos_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_cos_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_sin_real
Eigen::MatrixXd EigenR_sin_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_sin_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_sin_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_sin_cplx
Rcpp::List EigenR_sin_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_sin_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_sin_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_cosh_real
Eigen::MatrixXd EigenR_cosh_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_cosh_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_cosh_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_cosh_cplx
Rcpp::List EigenR_cosh_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_cosh_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_cosh_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_sinh_real
Eigen::MatrixXd EigenR_sinh_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_sinh_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_sinh_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_sinh_cplx
Rcpp::List EigenR_sinh_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_sinh_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_sinh_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_pow_real
Eigen::MatrixXd EigenR_pow_real(const Eigen::MatrixXd& M, const double& p);
RcppExport SEXP _EigenR_EigenR_pow_real(SEXP MSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const double& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_pow_real(M, p));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_pow_cplx
Rcpp::List EigenR_pow_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im, const std::complex<double>& p);
RcppExport SEXP _EigenR_EigenR_pow_cplx(SEXP ReSEXP, SEXP ImSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    Rcpp::traits::input_parameter< const std::complex<double>& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_pow_cplx(Re, Im, p));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_sqrt_real
Eigen::MatrixXd EigenR_sqrt_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_sqrt_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_sqrt_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_sqrt_cplx
Rcpp::List EigenR_sqrt_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_sqrt_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_sqrt_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_QR_real
Rcpp::List EigenR_QR_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_QR_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_QR_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_QR_cplx
Rcpp::List EigenR_QR_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_QR_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_QR_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_rank_real
unsigned EigenR_rank_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_rank_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_rank_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_rank_cplx
unsigned EigenR_rank_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_rank_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_rank_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_isInjective_real
bool EigenR_isInjective_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_isInjective_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_isInjective_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_isInjective_cplx
bool EigenR_isInjective_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_isInjective_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_isInjective_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_isSurjective_real
bool EigenR_isSurjective_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_isSurjective_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_isSurjective_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_isSurjective_cplx
bool EigenR_isSurjective_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_isSurjective_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_isSurjective_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_isInvertible_real
bool EigenR_isInvertible_real(const Eigen::MatrixXd& M);
RcppExport SEXP _EigenR_EigenR_isInvertible_real(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_isInvertible_real(M));
    return rcpp_result_gen;
END_RCPP
}
// EigenR_isInvertible_cplx
bool EigenR_isInvertible_cplx(const Eigen::MatrixXd& Re, const Eigen::MatrixXd& Im);
RcppExport SEXP _EigenR_EigenR_isInvertible_cplx(SEXP ReSEXP, SEXP ImSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Re(ReSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Im(ImSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenR_isInvertible_cplx(Re, Im));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_EigenR_EigenR_chol_real", (DL_FUNC) &_EigenR_EigenR_chol_real, 1},
    {"_EigenR_EigenR_chol_cplx", (DL_FUNC) &_EigenR_EigenR_chol_cplx, 2},
    {"_EigenR_EigenR_chol_sparse_real", (DL_FUNC) &_EigenR_EigenR_chol_sparse_real, 5},
    {"_EigenR_EigenR_chol_sparse_cplx", (DL_FUNC) &_EigenR_EigenR_chol_sparse_cplx, 5},
    {"_EigenR_EigenR_UtDU_real", (DL_FUNC) &_EigenR_EigenR_UtDU_real, 1},
    {"_EigenR_EigenR_UtDU_cplx", (DL_FUNC) &_EigenR_EigenR_UtDU_cplx, 2},
    {"_EigenR_EigenR_det_real", (DL_FUNC) &_EigenR_EigenR_det_real, 1},
    {"_EigenR_EigenR_det_cplx", (DL_FUNC) &_EigenR_EigenR_det_cplx, 2},
    {"_EigenR_EigenR_det_sparse_real", (DL_FUNC) &_EigenR_EigenR_det_sparse_real, 5},
    {"_EigenR_EigenR_det_sparse_cplx", (DL_FUNC) &_EigenR_EigenR_det_sparse_cplx, 5},
    {"_EigenR_EigenR_absdet", (DL_FUNC) &_EigenR_EigenR_absdet, 1},
    {"_EigenR_EigenR_logabsdet", (DL_FUNC) &_EigenR_EigenR_logabsdet, 1},
    {"_EigenR_EigenR_image_LU_real", (DL_FUNC) &_EigenR_EigenR_image_LU_real, 1},
    {"_EigenR_EigenR_image_LU_cplx", (DL_FUNC) &_EigenR_EigenR_image_LU_cplx, 2},
    {"_EigenR_EigenR_image_QR_real", (DL_FUNC) &_EigenR_EigenR_image_QR_real, 1},
    {"_EigenR_EigenR_image_QR_cplx", (DL_FUNC) &_EigenR_EigenR_image_QR_cplx, 2},
    {"_EigenR_EigenR_image_COD_real", (DL_FUNC) &_EigenR_EigenR_image_COD_real, 1},
    {"_EigenR_EigenR_image_COD_cplx", (DL_FUNC) &_EigenR_EigenR_image_COD_cplx, 2},
    {"_EigenR_EigenR_inverse_real", (DL_FUNC) &_EigenR_EigenR_inverse_real, 1},
    {"_EigenR_EigenR_inverse_cplx", (DL_FUNC) &_EigenR_EigenR_inverse_cplx, 2},
    {"_EigenR_EigenR_pseudoInverse_real", (DL_FUNC) &_EigenR_EigenR_pseudoInverse_real, 1},
    {"_EigenR_EigenR_pseudoInverse_cplx", (DL_FUNC) &_EigenR_EigenR_pseudoInverse_cplx, 2},
    {"_EigenR_EigenR_kernel_COD_real", (DL_FUNC) &_EigenR_EigenR_kernel_COD_real, 1},
    {"_EigenR_EigenR_kernel_COD_cplx", (DL_FUNC) &_EigenR_EigenR_kernel_COD_cplx, 2},
    {"_EigenR_EigenR_kernel_LU_real", (DL_FUNC) &_EigenR_EigenR_kernel_LU_real, 1},
    {"_EigenR_EigenR_kernel_LU_cplx", (DL_FUNC) &_EigenR_EigenR_kernel_LU_cplx, 2},
    {"_EigenR_EigenR_kernelDimension_real", (DL_FUNC) &_EigenR_EigenR_kernelDimension_real, 1},
    {"_EigenR_EigenR_kernelDimension_cplx", (DL_FUNC) &_EigenR_EigenR_kernelDimension_cplx, 2},
    {"_EigenR_EigenR_lsSolve_real", (DL_FUNC) &_EigenR_EigenR_lsSolve_real, 2},
    {"_EigenR_EigenR_lsSolve_cplx", (DL_FUNC) &_EigenR_EigenR_lsSolve_cplx, 4},
    {"_EigenR_EigenR_lsSolve_cod_real", (DL_FUNC) &_EigenR_EigenR_lsSolve_cod_real, 2},
    {"_EigenR_EigenR_lsSolve_cod_cplx", (DL_FUNC) &_EigenR_EigenR_lsSolve_cod_cplx, 4},
    {"_EigenR_EigenR_exp_real", (DL_FUNC) &_EigenR_EigenR_exp_real, 1},
    {"_EigenR_EigenR_exp_cplx", (DL_FUNC) &_EigenR_EigenR_exp_cplx, 2},
    {"_EigenR_EigenR_log_real", (DL_FUNC) &_EigenR_EigenR_log_real, 1},
    {"_EigenR_EigenR_log_cplx", (DL_FUNC) &_EigenR_EigenR_log_cplx, 2},
    {"_EigenR_EigenR_cos_real", (DL_FUNC) &_EigenR_EigenR_cos_real, 1},
    {"_EigenR_EigenR_cos_cplx", (DL_FUNC) &_EigenR_EigenR_cos_cplx, 2},
    {"_EigenR_EigenR_sin_real", (DL_FUNC) &_EigenR_EigenR_sin_real, 1},
    {"_EigenR_EigenR_sin_cplx", (DL_FUNC) &_EigenR_EigenR_sin_cplx, 2},
    {"_EigenR_EigenR_cosh_real", (DL_FUNC) &_EigenR_EigenR_cosh_real, 1},
    {"_EigenR_EigenR_cosh_cplx", (DL_FUNC) &_EigenR_EigenR_cosh_cplx, 2},
    {"_EigenR_EigenR_sinh_real", (DL_FUNC) &_EigenR_EigenR_sinh_real, 1},
    {"_EigenR_EigenR_sinh_cplx", (DL_FUNC) &_EigenR_EigenR_sinh_cplx, 2},
    {"_EigenR_EigenR_pow_real", (DL_FUNC) &_EigenR_EigenR_pow_real, 2},
    {"_EigenR_EigenR_pow_cplx", (DL_FUNC) &_EigenR_EigenR_pow_cplx, 3},
    {"_EigenR_EigenR_sqrt_real", (DL_FUNC) &_EigenR_EigenR_sqrt_real, 1},
    {"_EigenR_EigenR_sqrt_cplx", (DL_FUNC) &_EigenR_EigenR_sqrt_cplx, 2},
    {"_EigenR_EigenR_QR_real", (DL_FUNC) &_EigenR_EigenR_QR_real, 1},
    {"_EigenR_EigenR_QR_cplx", (DL_FUNC) &_EigenR_EigenR_QR_cplx, 2},
    {"_EigenR_EigenR_rank_real", (DL_FUNC) &_EigenR_EigenR_rank_real, 1},
    {"_EigenR_EigenR_rank_cplx", (DL_FUNC) &_EigenR_EigenR_rank_cplx, 2},
    {"_EigenR_EigenR_isInjective_real", (DL_FUNC) &_EigenR_EigenR_isInjective_real, 1},
    {"_EigenR_EigenR_isInjective_cplx", (DL_FUNC) &_EigenR_EigenR_isInjective_cplx, 2},
    {"_EigenR_EigenR_isSurjective_real", (DL_FUNC) &_EigenR_EigenR_isSurjective_real, 1},
    {"_EigenR_EigenR_isSurjective_cplx", (DL_FUNC) &_EigenR_EigenR_isSurjective_cplx, 2},
    {"_EigenR_EigenR_isInvertible_real", (DL_FUNC) &_EigenR_EigenR_isInvertible_real, 1},
    {"_EigenR_EigenR_isInvertible_cplx", (DL_FUNC) &_EigenR_EigenR_isInvertible_cplx, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_EigenR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
